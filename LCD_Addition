
// PIC16F877A Configuration Bit Settings

// 'C' source line config statements

// CONFIG
#pragma config FOSC = EXTRC     // Oscillator Selection bits (RC oscillator)
#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config BOREN = OFF      // Brown-out Reset Enable bit (BOR disabled)
#pragma config LVP = OFF        // Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit (RB3 is digital I/O, HV on MCLR must be used for programming)
#pragma config CPD = OFF        // Data EEPROM Memory Code Protection bit (Data EEPROM code protection off)
#pragma config WRT = OFF        // Flash Program Memory Write Enable bits (Write protection off; all program memory may be written to by EECON control)
#pragma config CP = OFF         // Flash Program Memory Code Protection bit (Code protection off)

// #pragma config statements should precede project file includes.
// Use project enums instead of #define for ON and OFF.

#include <xc.h>




#define _XTAL_FREQ 6000000

#define _XTAL_FREQ 6000000

void init(void);
void Lcd_command(unsigned char);
void Lcd_data(unsigned char);
void Lcdoutput(unsigned int);
unsigned char j,k[5],plus,equal;
unsigned int  num1,num2,sum,m,n;

/*Declaration of necessary function prototypes and variables*/

void main(){
    init();
    num1=523;
    num2=238;
    plus='+';
    equal='=';
    Lcd_command(0x80);
    Lcdoutput(num1);
    Lcd_data(plus);
    Lcdoutput(num2);
    Lcd_data(equal);
    sum=num1+num2;
    Lcdoutput(sum);
}

void init()
{
    TRISC=0xF6;//set pin RC0 and RC3 as output
    TRISD=0x00;//data flow through all pins in port d
    Lcd_command(0x38);//as per Lcd flow
    __delay_ms(100);
    Lcd_command(0x38);
    __delay_ms(100);
    Lcd_command(0x38);
    __delay_ms(100);
    Lcd_command(0x38);//To set number of lines and character display
    __delay_ms(100);
    Lcd_command(0x06);//To set starting and moving position
    __delay_ms(100);
    Lcd_command(0x0C);//Cursor or display shift
    __delay_ms(100);
    Lcd_command(0x01);// To clear display
    __delay_ms(100);
}
void Lcdoutput(unsigned int i){
    unsigned char s,j=1;
    m=i;
    while(m!=0){
    s=m-((m/10)*10);
    k[j]=s;
    j++;
    m=m/10;
    }
    k[j]='\0';
    j=j-1;
    while(j!=0){
        n=0x30+k[j];
        Lcd_data(n);
        j--;
}

}
void Lcd_data(unsigned char i){
    
    PORTC|=0x08;//set to data mode
    PORTD=i;
    PORTC|=0x01;//Enable to on
    PORTC&=~0x01;//Enable to off
    __delay_ms(100);
    
}
void Lcd_command(unsigned char i){
    
    PORTC&=~0x08;//set to command mode
    PORTD=i;
    PORTC|=0x01;//Enable on 
    PORTC&=~0x01;//Enable off
    __delay_ms(100);
    
}
